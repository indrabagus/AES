#define BOOST_TEST_MODULE   securednfc

#include <boost\test\unit_test.hpp>
#include <boost\array.hpp>
#include <stdexcept>

#include "xkaes.h"

namespace aes128{

    namespace cbcmmt7{
        boost::array<unsigned char,16> key = {{
            0xc4,0x91,0xca,0x31,0xf9,0x17,0x08,0x45,
            0x8e,0x29,0xa9,0x25,0xec,0x55,0x8d,0x78
        }};

        boost::array<unsigned char,16> iv = {{
            0x9e,0xf9,0x34,0x94,0x6e,0x5c,0xd0,0xae,
            0x97,0xbd,0x58,0x53,0x2c,0xb4,0x93,0x81,
        }};
        
        
        boost::array<unsigned char,128> plaintext = {{         
            0xcb,0x6a,0x78,0x7e,0x0d,0xec,0x56,0xf9,
            0xa1,0x65,0x95,0x7f,0x81,0xaf,0x33,0x6c,
            0xa6,0xb4,0x07,0x85,0xd9,0xe9,0x40,0x93,
            0xc6,0x19,0x0e,0x51,0x52,0x64,0x9f,0x88,
            0x2e,0x87,0x4d,0x79,0xac,0x5e,0x16,0x7b,
            0xd2,0xa7,0x4c,0xe5,0xae,0x08,0x8d,0x2e,
            0xe8,0x54,0xf6,0x53,0x9e,0x0a,0x94,0x79,
            0x6b,0x1e,0x1b,0xd4,0xc9,0xfc,0xdb,0xc7,
            0x9a,0xcb,0xef,0x4d,0x01,0xee,0xb8,0x97,
            0x76,0xd1,0x8a,0xf7,0x1a,0xe2,0xa4,0xfc,
            0x47,0xdd,0x66,0xdf,0x6c,0x4d,0xbe,0x1d,
            0x18,0x50,0xe4,0x66,0x54,0x9a,0x47,0xb6,
            0x36,0xbc,0xc7,0xc2,0xb3,0xa6,0x24,0x95,
            0xb5,0x6b,0xb6,0x7b,0x6d,0x45,0x5f,0x1e,
            0xeb,0xd9,0xbf,0xef,0xec,0xbc,0xa6,0xc7,
            0xf3,0x35,0xcf,0xce,0x9b,0x45,0xcb,0x9d
        }};

        boost::array<unsigned char,128> ciphertext = {{ 
            0x7b,0x29,0x31,0xf5,0x85,0x5f,0x71,0x71,
            0x45,0xe0,0x0f,0x15,0x2a,0x9f,0x47,0x94,
            0x35,0x9b,0x1f,0xfc,0xb3,0xe5,0x5f,0x59,
            0x4e,0x33,0x09,0x8b,0x51,0xc2,0x3a,0x6c,
            0x74,0xa0,0x6c,0x1d,0x94,0xfd,0xed,0x7f,
            0xd2,0xae,0x42,0xc7,0xdb,0x7a,0xca,0xef,
            0x58,0x44,0xcb,0x33,0xae,0xdd,0xc6,0x85,
            0x25,0x85,0xed,0x00,0x20,0xa6,0x69,0x9d,
            0x2c,0xb5,0x38,0x09,0xce,0xfd,0x16,0x91,
            0x48,0xce,0x42,0x29,0x2a,0xfa,0xb0,0x63,
            0x44,0x39,0x78,0x30,0x6c,0x58,0x2c,0x18,
            0xb9,0xce,0x0d,0xa3,0xd0,0x84,0xce,0x4d,
            0x3c,0x48,0x2c,0xfd,0x8f,0xcf,0x1a,0x85,
            0x08,0x4e,0x89,0xfb,0x88,0xb4,0x0a,0x08,
            0x4d,0x5e,0x97,0x24,0x66,0xd0,0x76,0x66,
            0x12,0x6f,0xb7,0x61,0xf8,0x40,0x78,0xf2
        }};
        

    }; // End of namespace cbcmmt7


}; // End of namespace 128

namespace aes256{
    namespace cbcmmt0{
        boost::array<unsigned char,32> key = {{ 
            0x6e,0xd7,0x6d,0x2d,0x97,0xc6,0x9f,0xd1,
            0x33,0x95,0x89,0x52,0x39,0x31,0xf2,0xa6,
            0xcf,0xf5,0x54,0xb1,0x5f,0x73,0x8f,0x21,
            0xec,0x72,0xdd,0x97,0xa7,0x33,0x09,0x07 }};


        boost::array<unsigned char,16> iv = {{ 
            0x85,0x1e,0x87,0x64,0x77,0x6e,0x67,0x96,
            0xaa,0xb7,0x22,0xdb,0xb6,0x44,0xac,0xe8 
        }};

        boost::array<unsigned char,16> plaintext = {{ 
            0x62,0x82,0xb8,0xc0,0x5c,0x5c,0x15,0x30,
            0xb9,0x7d,0x48,0x16,0xca,0x43,0x47,0x62 
        }};

        boost::array<unsigned char,16> ciphertext = {{ 
            0x6a,0xcc,0x04,0x14,0x2e,0x10,0x0a,0x65,
            0xf5,0x1b,0x97,0xad,0xf5,0x17,0x2c,0x41 
        }};
    };

    namespace cbcmmt1{
        boost::array<unsigned char,32> key = {{
            0xdc,0xe2,0x6c,0x6b,0x4c,0xfb,0x28,0x65,
            0x10,0xda,0x4e,0xec,0xd2,0xcf,0xfe,0x6c,
            0xdf,0x43,0x0f,0x33,0xdb,0x9b,0x5f,0x77,
            0xb4,0x60,0x67,0x9b,0xd4,0x9d,0x13,0xae
        }};
        
        
        boost::array<unsigned char,16> iv = {{
            0xfd,0xea,0xa1,0x34,0xc8,0xd7,0x37,0x9d,
            0x45,0x71,0x75,0xfd,0x1a,0x57,0xd3,0xfc
        }};
        
        boost::array<unsigned char,32> plaintext = {{
            0x50,0xe9,0xee,0xe1,0xac,0x52,0x80,0x09,
            0xe8,0xcb,0xcd,0x35,0x69,0x75,0x88,0x1f,
            0x95,0x72,0x54,0xb1,0x3f,0x91,0xd7,0xc6,
            0x66,0x2d,0x10,0x31,0x20,0x52,0xeb,0x00,
        }};    
            
        boost::array<unsigned char,32> ciphertext = {{
            0x2f,0xa0,0xdf,0x72,0x2a,0x9f,0xd3,0xb6,
            0x4c,0xb1,0x8f,0xb2,0xb3,0xdb,0x55,0xff,
            0x22,0x67,0x42,0x27,0x57,0x28,0x94,0x13,
            0xf8,0xf6,0x57,0x50,0x74,0x12,0xa6,0x4c
        }};
    };
    
    namespace cbcmmt2{
        boost::array<unsigned char,32> key = {{ 
            0xfe,0x89,0x01,0xfe,0xcd,0x3c,0xcd,0x2e,
            0xc5,0xfd,0xc7,0xc7,0xa0,0xb5,0x05,0x19,
            0xc2,0x45,0xb4,0x2d,0x61,0x1a,0x5e,0xf9,
            0xe9,0x02,0x68,0xd5,0x9f,0x3e,0xdf,0x33
        }};

        boost::array<unsigned char,16> iv = {{ 
            0xbd,0x41,0x6c,0xb3,0xb9,0x89,0x22,0x28,
            0xd8,0xf1,0xdf,0x57,0x56,0x92,0xe4,0xd0
        }};

        boost::array<unsigned char,48> plaintext = {{ 
            0x8d,0x3a,0xa1,0x96,0xec,0x3d,0x7c,0x9b,
            0x5b,0xb1,0x22,0xe7,0xfe,0x77,0xfb,0x12,
            0x95,0xa6,0xda,0x75,0xab,0xe5,0xd3,0xa5,
            0x10,0x19,0x4d,0x3a,0x8a,0x41,0x57,0xd5,
            0xc8,0x9d,0x40,0x61,0x97,0x16,0x61,0x98,
            0x59,0xda,0x3e,0xc9,0xb2,0x47,0xce,0xd9
        }};
        
        
        boost::array<unsigned char,48> ciphertext = {{ 
            0x60,0x8e,0x82,0xc7,0xab,0x04,0x00,0x7a,
            0xdb,0x22,0xe3,0x89,0xa4,0x47,0x97,0xfe,
            0xd7,0xde,0x09,0x0c,0x8c,0x03,0xca,0x8a,
            0x2c,0x5a,0xcd,0x9e,0x84,0xdf,0x37,0xfb,
            0xc5,0x8c,0xe8,0xed,0xb2,0x93,0xe9,0x8f,
            0x02,0xb6,0x40,0xd6,0xd1,0xd7,0x24,0x64
        }};            
    };
    
    namespace cbcmmt3{
    
        boost::array<unsigned char,32> key = {{
            0x04,0x93,0xff,0x63,0x71,0x08,0xaf,0x6a,
            0x5b,0x8e,0x90,0xac,0x1f,0xdf,0x03,0x5a,
            0x3d,0x4b,0xaf,0xd1,0xaf,0xb5,0x73,0xbe,
            0x7a,0xde,0x9e,0x86,0x82,0xe6,0x63,0xe5
        }};

        boost::array<unsigned char,16> iv = {{
            0xc0,0xcd,0x2b,0xeb,0xcc,0xbb,0x6c,0x49,
            0x92,0x0b,0xd5,0x48,0x2a,0xc7,0x56,0xe8
        }};
        
        
        boost::array<unsigned char,64> plaintext = {{
            0x8b,0x37,0xf9,0x14,0x8d,0xf4,0xbb,0x25,
            0x95,0x6b,0xe6,0x31,0x0c,0x73,0xc8,0xdc,
            0x58,0xea,0x97,0x14,0xff,0x49,0xb6,0x43,
            0x10,0x7b,0x34,0xc9,0xbf,0xf0,0x96,0xa9,
            0x4f,0xed,0xd6,0x82,0x35,0x26,0xab,0xc2,
            0x7a,0x8e,0x0b,0x16,0x61,0x6e,0xee,0x25,
            0x4a,0xb4,0x56,0x7d,0xd6,0x8e,0x8c,0xcd,
            0x4c,0x38,0xac,0x56,0x3b,0x13,0x63,0x9c
        }};

        boost::array<unsigned char,64> ciphertext = {{
            0x05,0xd5,0xc7,0x77,0x29,0x42,0x1b,0x08,
            0xb7,0x37,0xe4,0x11,0x19,0xfa,0x44,0x38,
            0xd1,0xf5,0x70,0xcc,0x77,0x2a,0x4d,0x6c,
            0x3d,0xf7,0xff,0xed,0xa0,0x38,0x4e,0xf8,
            0x42,0x88,0xce,0x37,0xfc,0x4c,0x4c,0x7d,
            0x11,0x25,0xa4,0x99,0xb0,0x51,0x36,0x4c,
            0x38,0x9f,0xd6,0x39,0xbd,0xda,0x64,0x7d,
            0xaa,0x3b,0xda,0xda,0xb2,0xeb,0x55,0x94
        }};
    
    };

}; // End oF namespace AES256



namespace aes192{
    namespace cbcmmt0{

        boost::array<unsigned char,24> key = {{
            0xba,0x75,0xf4,0xd1,0xd9,0xd7,0xcf,0x7f,
            0x55,0x14,0x45,0xd5,0x6c,0xc1,0xa8,0xab,
            0x2a,0x07,0x8e,0x15,0xe0,0x49,0xdc,0x2c
        }};

        boost::array<unsigned char,16> iv = {{
            0x53,0x1c,0xe7,0x81,0x76,0x40,0x16,0x66,
            0xaa,0x30,0xdb,0x94,0xec,0x4a,0x30,0xeb
        }};

        boost::array<unsigned char,16> plaintext = {{
            0xc5,0x1f,0xc2,0x76,0x77,0x4d,0xad,0x94,
            0xbc,0xdc,0x1d,0x28,0x91,0xec,0x86,0x68
        }};

        boost::array<unsigned char,16> ciphertext = {{
            0x70,0xdd,0x95,0xa1,0x4e,0xe9,0x75,0xe2,
            0x39,0xdf,0x36,0xff,0x4a,0xee,0x1d,0x5d
        }};
    };



    namespace cbcmmt1{
        boost::array<unsigned char,24> key = {{
            0xea,0xb3,0xb1,0x9c,0x58,0x1a,0xa8,0x73,
            0xe1,0x98,0x1c,0x83,0xab,0x8d,0x83,0xbb,
            0xf8,0x02,0x51,0x11,0xfb,0x2e,0x6b,0x21
        }};

        boost::array<unsigned char,16> iv = {{
            0xf3,0xd6,0x66,0x7e,0x8d,0x4d,0x79,0x1e,
            0x60,0xf7,0x50,0x5b,0xa3,0x83,0xeb,0x05
        }};

        boost::array<unsigned char,32> plaintext = {{
            0x9d,0x4e,0x4c,0xcc,0xd1,0x68,0x23,0x21,
            0x85,0x6d,0xf0,0x69,0xe3,0xf1,0xc6,0xfa,
            0x39,0x1a,0x08,0x3a,0x9f,0xb0,0x2d,0x59,
            0xdb,0x74,0xc1,0x40,0x81,0xb3,0xac,0xc4
        }};

        boost::array<unsigned char,32> ciphertext = {{
            0x51,0xd4,0x47,0x79,0xf9,0x0d,0x40,0xa8,
            0x00,0x48,0x27,0x6c,0x03,0x5c,0xb4,0x9c,
            0xa2,0xa4,0x7b,0xcb,0x9b,0x9c,0xf7,0x27,
            0x0b,0x91,0x44,0x79,0x37,0x87,0xd5,0x3f        
        }};
    };

}; // End oF namespace AES192


BOOST_AUTO_TEST_SUITE(aes128testsuite)

    BOOST_AUTO_TEST_CASE(cbcmmt7decrypt)
    {
        using namespace aes128::cbcmmt7;
        boost::array<unsigned char,128> result;
        XK_AES aes(XK_AES::bitlen128);
        BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
        BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
        size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
        BOOST_REQUIRE_EQUAL(size,plaintext.size());
        BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());
    }


    BOOST_AUTO_TEST_CASE(cbcmmt7encrypt)
    {
        using namespace aes128::cbcmmt7;
        boost::array<unsigned char,128> result;
        XK_AES aes(XK_AES::bitlen128);
        BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
        BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
        size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
        BOOST_REQUIRE_EQUAL(size,ciphertext.size());
        BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());
    }

BOOST_AUTO_TEST_SUITE_END();



BOOST_AUTO_TEST_SUITE(aes192testsuite)
    
BOOST_AUTO_TEST_CASE(setkeyerror)
{
    boost::array<unsigned char,16> key = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
                                          0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_key(key.data(),key.size()),std::exception); 
}

BOOST_AUTO_TEST_CASE(setkeyerrornull)
{
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_key(NULL,0),std::exception); 
}

BOOST_AUTO_TEST_CASE(setkeynothrow)
{
    boost::array<unsigned char,24> key = {{0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,
                                           0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
                                         }};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW( aes.set_key(key.data(),key.size()));
}

BOOST_AUTO_TEST_CASE(setivnull)
{
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_iv(NULL,0),std::exception);
}

BOOST_AUTO_TEST_CASE(setiverrorlen)
{
    boost::array<unsigned char,8> iv = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_iv(iv.data(),iv.size()),std::exception);
}

BOOST_AUTO_TEST_CASE(setiv)
{
    boost::array<unsigned char,16> iv = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
                                          0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
}

BOOST_AUTO_TEST_CASE(setiv2)
{
    std::vector<unsigned char> iv(16);
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv));
}

BOOST_AUTO_TEST_CASE(cbcmmt0encrypt)
{
    using namespace aes192::cbcmmt0;

    boost::array<unsigned char,16> result;

    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}


BOOST_AUTO_TEST_CASE(cbcmmt1encrypt)
{    
    
    using namespace aes192::cbcmmt1;
    boost::array<unsigned char,32> result;
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),
                             plaintext.data(),
                             plaintext.size());

    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),
                                  ciphertext.end(),
                                  result.begin(),
                                  result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt0_decrypt)
{
    using namespace aes192::cbcmmt0;
    boost::array<unsigned char,16> result;
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv( iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt1decrypt)
{
    using namespace aes192::cbcmmt1;
    boost::array<unsigned char,32> result;

    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),
                                  result.begin(),result.end());

}

BOOST_AUTO_TEST_SUITE_END();



BOOST_AUTO_TEST_SUITE(aes256testsuite)
BOOST_AUTO_TEST_CASE(cbcmmt0encrypt)
{
    using namespace aes256::cbcmmt0;
    boost::array<unsigned char,16> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt0decrypt)
{
    using namespace aes256::cbcmmt0;
    boost::array<unsigned char,16> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt1encrypt)
{
    using namespace aes256::cbcmmt1;
    boost::array<unsigned char,32> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt1decrypt)
{
    using namespace aes256::cbcmmt1;
    boost::array<unsigned char,32> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt2encrypt)
{
    using namespace aes256::cbcmmt2;
    boost::array<unsigned char,48> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt2decrypt)
{
    using namespace aes256::cbcmmt2;
    boost::array<unsigned char,48> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt3encrypt)
{
    using namespace aes256::cbcmmt3;
    boost::array<unsigned char,64> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}


BOOST_AUTO_TEST_CASE(cbcmmt3decrypt)
{
    using namespace aes256::cbcmmt3;
    boost::array<unsigned char,64> result;
    XK_AES aes(XK_AES::bitlen256);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}
BOOST_AUTO_TEST_SUITE_END();
