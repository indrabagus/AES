
#include "AesTest.h"


namespace aes192{

    namespace cbcmmt0{

        boost::array<unsigned char,24> key = {{
            0xba,0x75,0xf4,0xd1,0xd9,0xd7,0xcf,0x7f,
            0x55,0x14,0x45,0xd5,0x6c,0xc1,0xa8,0xab,
            0x2a,0x07,0x8e,0x15,0xe0,0x49,0xdc,0x2c
        }};

        boost::array<unsigned char,16> iv = {{
            0x53,0x1c,0xe7,0x81,0x76,0x40,0x16,0x66,
            0xaa,0x30,0xdb,0x94,0xec,0x4a,0x30,0xeb
        }};

        boost::array<unsigned char,16> plaintext = {{
            0xc5,0x1f,0xc2,0x76,0x77,0x4d,0xad,0x94,
            0xbc,0xdc,0x1d,0x28,0x91,0xec,0x86,0x68
        }};

        boost::array<unsigned char,16> ciphertext = {{
            0x70,0xdd,0x95,0xa1,0x4e,0xe9,0x75,0xe2,
            0x39,0xdf,0x36,0xff,0x4a,0xee,0x1d,0x5d
        }};
    };

    namespace cbcmmt1{
        boost::array<unsigned char,24> key = {{
            0xea,0xb3,0xb1,0x9c,0x58,0x1a,0xa8,0x73,
            0xe1,0x98,0x1c,0x83,0xab,0x8d,0x83,0xbb,
            0xf8,0x02,0x51,0x11,0xfb,0x2e,0x6b,0x21
        }};

        boost::array<unsigned char,16> iv = {{
            0xf3,0xd6,0x66,0x7e,0x8d,0x4d,0x79,0x1e,
            0x60,0xf7,0x50,0x5b,0xa3,0x83,0xeb,0x05
        }};

        boost::array<unsigned char,32> plaintext = {{
            0x9d,0x4e,0x4c,0xcc,0xd1,0x68,0x23,0x21,
            0x85,0x6d,0xf0,0x69,0xe3,0xf1,0xc6,0xfa,
            0x39,0x1a,0x08,0x3a,0x9f,0xb0,0x2d,0x59,
            0xdb,0x74,0xc1,0x40,0x81,0xb3,0xac,0xc4
        }};

        boost::array<unsigned char,32> ciphertext = {{
            0x51,0xd4,0x47,0x79,0xf9,0x0d,0x40,0xa8,
            0x00,0x48,0x27,0x6c,0x03,0x5c,0xb4,0x9c,
            0xa2,0xa4,0x7b,0xcb,0x9b,0x9c,0xf7,0x27,
            0x0b,0x91,0x44,0x79,0x37,0x87,0xd5,0x3f        
        }};
    };

    
    namespace cbcmmt2 { 
        boost::array<unsigned char,24> key = {{ 
            0x16,0xc9,0x3b,0xb3,0x98,0xf1,0xfc,0x0c,0xf6,0xd6,0x8f,0xc7,0xa5,0x67,0x3c,0xdf,
            0x43,0x1f,0xa1,0x47,0x85,0x2b,0x4a,0x2d
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0xea,0xae,0xca,0x2e,0x07,0xdd,0xed,0xf5,0x62,0xf9,0x4d,0xf6,0x3f,0x0a,0x65,0x0f
        }};
        
        boost::array<unsigned char,48> plaintext = {{ 
            0xc5,0xce,0x95,0x86,0x13,0xbf,0x74,0x17,0x18,0xc1,0x74,0x44,0x48,0x4e,0xba,0xf1,
            0x05,0x0d,0xdc,0xac,0xb5,0x9b,0x95,0x90,0x17,0x8c,0xbe,0x69,0xd7,0xad,0x79,0x19,
            0x60,0x8c,0xb0,0x3a,0xf1,0x3b,0xbe,0x04,0xf3,0x50,0x6b,0x71,0x8a,0x30,0x1e,0xa0
        }};
        
        boost::array<unsigned char,48> ciphertext = {{ 
            0xed,0x6a,0x50,0xe0,0xc6,0x92,0x1d,0x52,0xd6,0x64,0x7f,0x75,0xd6,0x7b,0x4f,0xd5,
            0x6a,0xce,0x1f,0xed,0xb8,0xb5,0xa6,0xa9,0x97,0xb4,0xd1,0x31,0x64,0x05,0x47,0xd2,
            0x2c,0x5d,0x88,0x4a,0x75,0xe6,0x75,0x2b,0x58,0x46,0xb5,0xb3,0x3a,0x51,0x81,0xf4
        }};
        
    };

    namespace cbcmmt3 { 
        boost::array<unsigned char,24> key = {{ 
            0x06,0x7b,0xb1,0x7b,0x4d,0xf7,0x85,0x69,0x7e,0xac,0xcf,0x96,0x1f,0x98,0xe2,0x12,
            0xcb,0x75,0xe6,0x79,0x7c,0xe9,0x35,0xcb
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x8b,0x59,0xc9,0x20,0x9c,0x52,0x9c,0xa8,0x39,0x1c,0x9f,0xc0,0xce,0x03,0x3c,0x38
        }};
        
        boost::array<unsigned char,64> plaintext = {{ 
            0xdb,0x37,0x85,0xa8,0x89,0xb4,0xbd,0x38,0x77,0x54,0xda,0x22,0x2f,0x0e,0x4c,0x2d,
            0x2b,0xfe,0x0d,0x79,0xe0,0x5b,0xc9,0x10,0xfb,0xa9,0x41,0xbe,0xea,0x30,0xf1,0x23,
            0x9e,0xac,0xf0,0x06,0x8f,0x46,0x19,0xec,0x01,0xc3,0x68,0xe9,0x86,0xfc,0xa6,0xb7,
            0xc5,0x8e,0x49,0x05,0x79,0xd2,0x96,0x11,0xbd,0x10,0x08,0x79,0x86,0xef,0xf5,0x4f
        }};
        
        boost::array<unsigned char,64> ciphertext = {{ 
            0xd5,0xf5,0x58,0x97,0x60,0xbf,0x9c,0x76,0x22,0x28,0xfd,0xe2,0x36,0xde,0x1f,0xa2,
            0xdd,0x2d,0xad,0x44,0x8d,0xb3,0xfa,0x9b,0xe0,0xc4,0x19,0x6e,0xfd,0x46,0xa3,0x5c,
            0x84,0xdd,0x1a,0xc7,0x7d,0x9d,0xb5,0x8c,0x95,0x91,0x8c,0xb3,0x17,0xa6,0x43,0x0a,
            0x08,0xd2,0xfb,0x6a,0x8e,0x8b,0x0f,0x1c,0x9b,0x72,0xc7,0xa3,0x44,0xdc,0x34,0x9f
        }};
        
    };

    namespace cbcmmt4 { 
        boost::array<unsigned char,24> key = {{ 
            0x0f,0xd3,0x9d,0xe8,0x3e,0x0b,0xe7,0x7a,0x79,0xc8,0xa4,0xa6,0x12,0xe3,0xdd,0x9c,
            0x8a,0xae,0x2c,0xe3,0x5e,0x7a,0x2b,0xf8
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x7e,0x1d,0x62,0x9b,0x84,0xf9,0x3b,0x07,0x9b,0xe5,0x1f,0x9a,0x5f,0x5c,0xb2,0x3c
        }};
        
        boost::array<unsigned char,80> plaintext = {{ 
            0x38,0xfb,0xda,0x37,0xe2,0x8f,0xa8,0x6d,0x9d,0x83,0xa4,0x34,0x5e,0x41,0x9d,0xea,
            0x95,0xd2,0x8c,0x78,0x18,0xff,0x25,0x92,0x5d,0xb6,0xac,0x3a,0xed,0xaf,0x0a,0x86,
            0x15,0x4e,0x20,0xa4,0xdf,0xcc,0x5b,0x1b,0x41,0x92,0x89,0x53,0x93,0xe5,0xeb,0x58,
            0x46,0xc8,0x8b,0xdb,0xd4,0x1e,0xcf,0x7a,0xf3,0x10,0x4f,0x41,0x0e,0xae,0xe4,0x70,
            0xf5,0xd9,0x01,0x7e,0xd4,0x60,0x47,0x5f,0x62,0x69,0x53,0x03,0x5a,0x13,0xdb,0x1f
        }};
        
        boost::array<unsigned char,80> ciphertext = {{ 
            0xed,0xad,0xae,0x2f,0x9a,0x45,0xff,0x34,0x73,0xe0,0x2d,0x90,0x4c,0x94,0xd9,0x4a,
            0x30,0xa4,0xd9,0x2d,0xa4,0xde,0xb6,0xbc,0xb4,0xb0,0x77,0x44,0x72,0x69,0x45,0x71,
            0x84,0x20,0x39,0xf2,0x1c,0x49,0x6e,0xf9,0x3f,0xd6,0x58,0x84,0x2c,0x73,0x5f,0x8a,
            0x81,0xfc,0xd0,0xaa,0x57,0x84,0x42,0xab,0x89,0x3b,0x18,0xf6,0x06,0xae,0xd1,0xba,
            0xb1,0x1f,0x81,0x45,0x2d,0xd4,0x5e,0x9b,0x56,0xad,0xf2,0xec,0xcf,0x4e,0xa0,0x95
        }};
        
    };

    namespace cbcmmt5 { 
        boost::array<unsigned char,24> key = {{ 
            0xe3,0xfe,0xcc,0x75,0xf0,0x07,0x5a,0x09,0xb3,0x83,0xdf,0xd3,0x89,0xa3,0xd3,0x3c,
            0xc9,0xb8,0x54,0xb3,0xb2,0x54,0xc0,0xf4
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x36,0xea,0xb8,0x83,0xaf,0xef,0x93,0x6c,0xc3,0x8f,0x63,0x28,0x46,0x19,0xcd,0x19
        }};
        
        boost::array<unsigned char,96> plaintext = {{ 
            0x93,0x1b,0x2f,0x5f,0x3a,0x58,0x20,0xd5,0x3a,0x6b,0xea,0xaa,0x64,0x31,0x08,0x3a,
            0x34,0x88,0xf4,0xeb,0x03,0xb0,0xf5,0xb5,0x7e,0xf8,0x38,0xe1,0x57,0x96,0x23,0x10,
            0x3b,0xd6,0xe6,0x80,0x03,0x77,0x53,0x8b,0x2e,0x51,0xef,0x70,0x8f,0x3c,0x49,0x56,
            0x43,0x2e,0x8a,0x8e,0xe6,0xa3,0x4e,0x19,0x06,0x42,0xb2,0x6a,0xd8,0xbd,0xae,0x6c,
            0x2a,0xf9,0xa6,0xc7,0x99,0x6f,0x3b,0x60,0x04,0xd2,0x67,0x1e,0x41,0xf1,0xc9,0xf4,
            0x0e,0xe0,0x3d,0x1c,0x4a,0x52,0xb0,0xa0,0x65,0x4a,0x33,0x1f,0x15,0xf3,0x4d,0xce
        }};
        
        boost::array<unsigned char,96> ciphertext = {{ 
            0x75,0x39,0x59,0x74,0xbd,0x32,0xb3,0x66,0x56,0x54,0xa6,0xc8,0xe3,0x96,0xb8,0x8a,
            0xe3,0x4b,0x12,0x35,0x75,0x87,0x2a,0x7a,0xb6,0x87,0xd8,0xe7,0x6b,0x46,0xdf,0x91,
            0x1a,0x8a,0x59,0x0c,0xd0,0x1d,0x2f,0x5c,0x33,0x0b,0xe3,0xa6,0x62,0x6e,0x9d,0xd3,
            0xaa,0x5e,0x10,0xed,0x14,0xe8,0xff,0x82,0x98,0x11,0xb6,0xfe,0xd5,0x0f,0x3f,0x53,
            0x3c,0xa4,0x38,0x5a,0x1c,0xbc,0xa7,0x8f,0x5c,0x47,0x44,0xe5,0x0f,0x2f,0x83,0x59,
            0x16,0x5c,0x24,0x85,0xd1,0x32,0x4e,0x76,0xc3,0xea,0xe7,0x6a,0x0c,0xca,0xc6,0x29
        }};
        
    };

    namespace cbcmmt6 { 
        boost::array<unsigned char,24> key = {{ 
            0xf9,0xc2,0x75,0x65,0xeb,0x07,0x94,0x7c,0x8c,0xb5,0x1b,0x79,0x24,0x84,0x30,0xf7,
            0xb1,0x06,0x6c,0x3d,0x2f,0xdc,0x3d,0x13
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x2b,0xd6,0x7c,0xc8,0x9a,0xb7,0x94,0x8d,0x64,0x4a,0x49,0x67,0x28,0x43,0xcb,0xd9
        }};
        
        boost::array<unsigned char,112> plaintext = {{ 
            0x6a,0xbc,0xc2,0x70,0x17,0x3c,0xf1,0x14,0xd4,0x48,0x47,0xe9,0x11,0xa0,0x50,0xdb,
            0x57,0xba,0x7a,0x2e,0x2c,0x16,0x1c,0x6f,0x37,0xcc,0xb6,0xaa,0xa4,0x67,0x7b,0xdd,
            0xca,0xf5,0x0c,0xad,0x0b,0x5f,0x87,0x58,0xfc,0xf7,0xc0,0xeb,0xc6,0x50,0xce,0xb5,
            0xcd,0x52,0xca,0xfb,0x8f,0x8d,0xd3,0xed,0xce,0xce,0x55,0xd9,0xf1,0xf0,0x8b,0x9f,
            0xa8,0xf5,0x43,0x65,0xcf,0x56,0xe2,0x8b,0x95,0x96,0xa7,0xe1,0xdd,0x1d,0x34,0x18,
            0xe4,0x44,0x4a,0x77,0x24,0xad,0xd4,0xcf,0x79,0xd5,0x27,0xb1,0x83,0xec,0x88,0xde,
            0x4b,0xe4,0xee,0xff,0x29,0xc8,0x0a,0x97,0xe5,0x4f,0x85,0x35,0x1c,0xb1,0x89,0xee
        }};
        
        boost::array<unsigned char,112> ciphertext = {{ 
            0xca,0x28,0x29,0x24,0xa6,0x11,0x87,0xfe,0xb4,0x05,0x20,0x97,0x91,0x06,0xe5,0xcc,
            0x86,0x19,0x57,0xf2,0x38,0x28,0xdc,0xb7,0x28,0x5e,0x0e,0xaa,0xc8,0xa0,0xca,0x2a,
            0x6b,0x60,0x50,0x3d,0x63,0xd6,0x03,0x9f,0x46,0x93,0xdb,0xa3,0x2f,0xa1,0xf7,0x3a,
            0xe2,0xe7,0x09,0xca,0x94,0x91,0x1f,0x28,0xa5,0xed,0xd1,0xf3,0x0e,0xad,0xdd,0x54,
            0x68,0x0c,0x43,0xac,0xc9,0xc7,0x4c,0xd9,0x0d,0x8b,0xb6,0x48,0xb4,0xe5,0x44,0x27,
            0x5f,0x47,0xe5,0x14,0xda,0xa2,0x06,0x97,0xf6,0x6c,0x73,0x8e,0xb3,0x03,0x37,0xf0,
            0x17,0xfc,0xa1,0xa2,0x6d,0xa4,0xd1,0xa0,0xcc,0x0a,0x0e,0x98,0xe2,0x46,0x30,0x70
        }};

    };
    
    namespace cbcmmt7 { 
        boost::array<unsigned char,24> key = {{ 
            0xfb,0x09,0xcf,0x9e,0x00,0xdb,0xf8,0x83,0x68,0x9d,0x07,0x9c,0x92,0x00,0x77,0xc0,
            0x07,0x3c,0x31,0x89,0x0b,0x55,0xba,0xb5
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0xe3,0xc8,0x9b,0xd0,0x97,0xc3,0xab,0xdd,0xf6,0x4f,0x48,0x81,0xdb,0x6d,0xbf,0xe2
        }};
        
        boost::array<unsigned char,128> plaintext = {{ 
            0xc1,0xa3,0x76,0x83,0xfb,0x28,0x94,0x67,0xdd,0x1b,0x2c,0x89,0xef,0xba,0x16,0xbb,
            0xd2,0xee,0x24,0xcf,0x18,0xd1,0x9d,0x44,0x59,0x6d,0xed,0x26,0x82,0xc7,0x9a,0x2f,
            0x71,0x1c,0x7a,0x32,0xbf,0x6a,0x24,0xba,0xdd,0x32,0xa4,0xee,0x63,0x7c,0x73,0xb7,
            0xa4,0x1d,0xa6,0x25,0x86,0x35,0x65,0x0f,0x91,0xfb,0x9f,0xfa,0x45,0xbd,0xfc,0x3c,
            0xb1,0x22,0x13,0x62,0x41,0xb3,0xde,0xce,0xd8,0x99,0x6a,0xa5,0x1e,0xa8,0xd3,0xe8,
            0x1c,0x9d,0x70,0xe0,0x06,0xa4,0x4b,0xc0,0x57,0x1e,0xd4,0x86,0x23,0xa0,0xd6,0x22,
            0xa9,0x3f,0xa9,0xda,0x29,0x0b,0xaa,0xed,0xf5,0xd9,0xe8,0x76,0xc9,0x46,0x20,0x94,
            0x5f,0xf8,0xec,0xc8,0x3f,0x27,0x37,0x9e,0xd5,0x5c,0xf4,0x90,0xc5,0x79,0x0f,0x27
        }};
        
        boost::array<unsigned char,128> ciphertext = {{ 
            0x81,0x58,0xe2,0x14,0x20,0xf2,0x5b,0x59,0xd6,0xae,0x94,0x3f,0xa1,0xcb,0xf2,0x1f,
            0x02,0xe9,0x79,0xf4,0x19,0xda,0xb0,0x12,0x6a,0x72,0x1b,0x7e,0xef,0x55,0xbe,0xe9,
            0xad,0x97,0xf5,0xcc,0xff,0x7d,0x23,0x90,0x57,0xbb,0xc1,0x9a,0x8c,0x37,0x81,0x42,
            0xf7,0x67,0x2f,0x1d,0x5e,0x7e,0x17,0xd7,0xbe,0xbc,0xb0,0x07,0x0e,0x83,0x55,0xca,
            0xce,0x66,0x60,0x17,0x1a,0x53,0xb6,0x18,0x16,0xae,0x82,0x4a,0x6e,0xf6,0x9c,0xe4,
            0x70,0xb6,0xff,0xd3,0xb5,0xbb,0x4b,0x43,0x88,0x74,0xd9,0x1d,0x27,0x85,0x4d,0x3b,
            0x6f,0x25,0x86,0x0d,0x38,0x68,0x95,0x8d,0xe3,0x30,0x7d,0x62,0xb1,0x33,0x9b,0xdd,
            0xdb,0x8a,0x31,0x8c,0x0c,0xe0,0xf3,0x3c,0x17,0xca,0xf0,0xe9,0xf6,0x04,0x08,0x20
        }};
        
    };

    namespace cbcmmt8{ 
        boost::array<unsigned char,24> key = {{ 
            0xbc,0xa6,0xfa,0x3c,0x67,0xfd,0x29,0x4e,0x95,0x8f,0x66,0xfe,0x8b,0xd6,0x4f,0x45,
            0xf4,0x28,0xf5,0xbc,0x8e,0x97,0x33,0xa7
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x92,0xa4,0x7f,0x28,0x33,0xf1,0x45,0x0d,0x1d,0xa4,0x17,0x17,0xbd,0xc6,0xe8,0x3c
        }};
        
        boost::array<unsigned char,144> plaintext = {{ 
            0x5b,0xec,0xbc,0x31,0xd8,0xbe,0xad,0x6d,0x36,0xae,0x01,0x4a,0x58,0x63,0xd1,0x4a,
            0x43,0x1e,0x6b,0x55,0xd2,0x9e,0xa6,0xba,0xaa,0x41,0x72,0x71,0x71,0x6d,0xb3,0xa3,
            0x3b,0x2e,0x50,0x6b,0x45,0x20,0x86,0xdf,0xe6,0x90,0x83,0x4a,0xc2,0xde,0x30,0xbc,
            0x41,0x25,0x4e,0xc5,0x40,0x1e,0xc4,0x7d,0x06,0x42,0x37,0xc7,0x79,0x2f,0xdc,0xd7,
            0x91,0x4d,0x8a,0xf2,0x0e,0xb1,0x14,0x75,0x66,0x42,0xd5,0x19,0x02,0x1a,0x8c,0x75,
            0xa9,0x2f,0x6b,0xc5,0x3d,0x32,0x6a,0xe9,0xa5,0xb7,0xe1,0xb1,0x0a,0x97,0x56,0x57,
            0x46,0x92,0x93,0x4d,0x99,0x39,0xfc,0x39,0x9e,0x0c,0x20,0x3f,0x7e,0xdf,0x8e,0x7e,
            0x64,0x82,0xea,0xdd,0x31,0xa0,0x40,0x07,0x70,0xe8,0x97,0xb4,0x8c,0x6b,0xca,0x2b,
            0x40,0x45,0x93,0x04,0x50,0x80,0xe9,0x33,0x77,0x35,0x8c,0x42,0xa0,0xf4,0xde,0xde
        }};
        
        boost::array<unsigned char,144> ciphertext = {{ 
            0x92,0x6d,0xb2,0x48,0xcc,0x1b,0xa2,0x0f,0x0c,0x57,0x63,0x1a,0x7c,0x8a,0xef,0x09,
            0x4f,0x79,0x19,0x37,0xb9,0x05,0x94,0x9e,0x34,0x60,0x24,0x0e,0x8b,0xfa,0x6f,0xa4,
            0x83,0x11,0x5a,0x1b,0x31,0x0b,0x6e,0x43,0x69,0xca,0xeb,0xc5,0x26,0x28,0x88,0x37,
            0x7b,0x1d,0xda,0xa5,0x80,0x0e,0xa4,0x96,0xa2,0xbd,0xff,0x0f,0x9a,0x10,0x31,0xe7,
            0x12,0x9c,0x9a,0x20,0xe3,0x56,0x21,0xe7,0xf0,0xb8,0xba,0xca,0x0d,0x87,0x03,0x0f,
            0x2a,0xe7,0xca,0x85,0x93,0xc8,0x59,0x96,0x77,0xa0,0x6f,0xd4,0xb2,0x60,0x09,0xea,
            0xd0,0x8f,0xec,0xac,0x24,0xca,0xa9,0xcf,0x2c,0xad,0x3b,0x47,0x0c,0x82,0x27,0x41,
            0x5a,0x7b,0x1e,0x0f,0x2e,0xab,0x3f,0xad,0x96,0xd7,0x0a,0x20,0x9c,0x8b,0xb2,0x6c,
            0x62,0x76,0x77,0xe2,0x53,0x1b,0x94,0x35,0xca,0x6e,0x3c,0x44,0x4d,0x19,0x5b,0x5f
        }};
    };
    
    namespace cbcmmt9 { 
        boost::array<unsigned char,24> key = {{ 
            0x16,0x2a,0xd5,0x0e,0xe6,0x4a,0x07,0x02,0xaa,0x55,0x1f,0x57,0x1d,0xed,0xc1,0x6b,
            0x2c,0x1b,0x6a,0x1e,0x4d,0x4b,0x5e,0xee
        }};
        
        boost::array<unsigned char,16> iv = {{ 
            0x24,0x40,0x80,0x38,0x16,0x1a,0x2c,0xca,0xe0,0x7b,0x02,0x9b,0xb6,0x63,0x55,0xc1
        }};
        
        boost::array<unsigned char,160> plaintext = {{ 
            0xbe,0x8a,0xbf,0x00,0x90,0x13,0x63,0x98,0x7a,0x82,0xcc,0x77,0xd0,0xec,0x91,0x69,
            0x7b,0xa3,0x85,0x7f,0x9e,0x4f,0x84,0xbd,0x79,0x40,0x6c,0x13,0x8d,0x02,0x69,0x8f,
            0x00,0x32,0x76,0xd0,0x44,0x91,0x20,0xbe,0xf4,0x57,0x8d,0x78,0xfe,0xca,0xbe,0x8e,
            0x07,0x0e,0x11,0x71,0x0b,0x3f,0x0a,0x27,0x44,0xbd,0x52,0x43,0x4e,0xc7,0x00,0x15,
            0x88,0x4c,0x18,0x1e,0xbd,0xfd,0x51,0xc6,0x04,0xa7,0x1c,0x52,0xe4,0xc0,0xe1,0x10,
            0xbc,0x40,0x8c,0xd4,0x62,0xb2,0x48,0xa8,0x0b,0x8a,0x8a,0xc0,0x6b,0xb9,0x52,0xac,
            0x1d,0x7f,0xae,0xd1,0x44,0x80,0x7f,0x1a,0x73,0x1b,0x7f,0xeb,0xca,0xf7,0x83,0x57,
            0x62,0xde,0xfe,0x92,0xec,0xcf,0xc7,0xa9,0x94,0x4e,0x1c,0x70,0x2c,0xff,0xe6,0xbc,
            0x86,0x73,0x3e,0xd3,0x21,0x42,0x31,0x21,0x08,0x5a,0xc0,0x2d,0xf8,0x96,0x2b,0xcb,
            0xc1,0x93,0x70,0x92,0xee,0xbf,0x0e,0x90,0xa8,0xb2,0x0e,0x3d,0xd8,0xc2,0x44,0xae
        }};
        
        boost::array<unsigned char,160> ciphertext = {{ 
            0xc8,0x2c,0xf2,0xc4,0x76,0xde,0xa8,0xcb,0x6a,0x6e,0x60,0x7a,0x40,0xd2,0xf0,0x39,
            0x1b,0xe8,0x2e,0xa9,0xec,0x84,0xa5,0x37,0xa6,0x82,0x0f,0x9a,0xfb,0x99,0x7b,0x76,
            0x39,0x7d,0x00,0x54,0x24,0xfa,0xa6,0xa7,0x4d,0xc4,0xe8,0xc7,0xaa,0x4a,0x89,0x00,
            0x69,0x0f,0x89,0x4b,0x6d,0x1d,0xca,0x80,0x67,0x53,0x93,0xd2,0x24,0x3a,0xda,0xc7,
            0x62,0xf1,0x59,0x30,0x1e,0x35,0x7e,0x98,0xb7,0x24,0x76,0x23,0x10,0xcd,0x5a,0x7b,
            0xaf,0xe1,0xc2,0xa0,0x30,0xdb,0xa4,0x6f,0xd9,0x3a,0x9f,0xdb,0x89,0xcc,0x13,0x2c,
            0xa9,0xc1,0x7d,0xc7,0x20,0x31,0xec,0x68,0x22,0xee,0x5a,0x9d,0x99,0xdb,0xca,0x66,
            0xc7,0x84,0xc0,0x1b,0x08,0x85,0xcb,0xb6,0x2e,0x29,0xd9,0x78,0x01,0x92,0x7e,0xc4,
            0x15,0xa5,0xd2,0x15,0x15,0x8d,0x32,0x5f,0x9e,0xe6,0x89,0x43,0x7a,0xd1,0xb7,0x68,
            0x4a,0xd3,0x3c,0x0d,0x92,0x73,0x94,0x51,0xac,0x87,0xf3,0x9f,0xf8,0xc3,0x1b,0x84
        }};
        
    };
    
}; // End oF namespace AES192



BOOST_AUTO_TEST_SUITE(aes192testsuite)
    
BOOST_AUTO_TEST_CASE(setkeyerror)
{
    boost::array<unsigned char,16> key = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
                                          0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_key(key.data(),key.size()),std::exception); 
}

BOOST_AUTO_TEST_CASE(setkeyerrornull)
{
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_key(NULL,0),std::exception); 
}

BOOST_AUTO_TEST_CASE(setkeynothrow)
{
    boost::array<unsigned char,24> key = {{0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,
                                           0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
                                         }};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW( aes.set_key(key.data(),key.size()));
}

BOOST_AUTO_TEST_CASE(setivnull)
{
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_iv(NULL,0),std::exception);
}

BOOST_AUTO_TEST_CASE(setiverrorlen)
{
    boost::array<unsigned char,8> iv = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_THROW(aes.set_iv(iv.data(),iv.size()),std::exception);
}

BOOST_AUTO_TEST_CASE(setiv)
{
    boost::array<unsigned char,16> iv = {{0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
                                          0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}};
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
}

BOOST_AUTO_TEST_CASE(setiv2)
{
    std::vector<unsigned char> iv(16);
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv));
}

BOOST_AUTO_TEST_CASE(cbcmmt0encrypt)
{
    using namespace aes192::cbcmmt0;

    boost::array<unsigned char,16> result;

    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),plaintext.data(),plaintext.size());
    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),ciphertext.end(),result.begin(),result.end());

}


BOOST_AUTO_TEST_CASE(cbcmmt1encrypt)
{    
    
    using namespace aes192::cbcmmt1;
    boost::array<unsigned char,32> result;
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.encrypt(result.data(),
                             plaintext.data(),
                             plaintext.size());

    BOOST_REQUIRE_EQUAL(size,ciphertext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(),
                                  ciphertext.end(),
                                  result.begin(),
                                  result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt0_decrypt)
{
    using namespace aes192::cbcmmt0;
    boost::array<unsigned char,16> result;
    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv( iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),result.begin(),result.end());

}

BOOST_AUTO_TEST_CASE(cbcmmt1decrypt)
{
    using namespace aes192::cbcmmt1;
    boost::array<unsigned char,32> result;

    XK_AES aes(XK_AES::bitlen192);
    BOOST_CHECK_NO_THROW(aes.set_iv(iv.data(),iv.size()));
    BOOST_CHECK_NO_THROW(aes.set_key(key.data(),key.size()));
    size_t size = aes.decrypt(result.data(),ciphertext.data(),ciphertext.size());
    BOOST_REQUIRE_EQUAL(size,plaintext.size());
    BOOST_CHECK_EQUAL_COLLECTIONS(plaintext.begin(),plaintext.end(),
                                  result.begin(),result.end());

}

BOOST_AUTO_TEST_SUITE_END();

